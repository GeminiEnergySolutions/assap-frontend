{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;;;;AAKO,MAAM,2BAA2B;IAHxC;QAIE,8CAAU,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAC;KAUrD;IARC,IAAI,MAAM;QACR,OAAO,kEAAI,2CAAQ,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED,IAAI,MAAM,CAAC,KAAa;QACtB,kEAAI,uCAAW,KAAK,OAAC;QACrB,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;;;sGAVU,2BAA2B;4HAA3B,2BAA2B,WAA3B,2BAA2B,mBAF1B,MAAM;;;;;;;;;;;;;;;;;;;ACGb,MAAM,qBAAqB;IAChC,YACU,2BAAwD;QAAxD,gCAA2B,GAA3B,2BAA2B,CAA6B;IAElE,CAAC;IAED,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAChD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,4BAA4B,CAAC,EAAE;YACrD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,MAAM,EAAC,MAAM,EAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC;QAClD,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC1B,IAAI,MAAM,EAAE;YACV,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,MAAM,CAAC,CAAC;SAC5D;QACD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;;0FAlBU,qBAAqB;sHAArB,qBAAqB,WAArB,qBAAqB;;;;;;;;;;;;;;;;;;;;ACNW;AAC4B;AAEV;AACR;;AAkBhD,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;kHAThB;QACT,kEAAiB;QACjB;YACE,OAAO,EAAE,mEAAiB;YAC1B,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,0EAAqB;SAChC;KACF,YAXQ;YACP,yDAAY;YACZ,kEAAgB;SACjB;mIAUU,gBAAgB,cAZzB,yDAAY;QACZ,kEAAgB;;;;;;;;;;;;;;;;;;;ACJb,MAAM,iBAAiB;IAE5B,YACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAE1B,CAAC;IAED,IAAI,CAAC,MAAc;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,6CAA6C,EAAE;YAClE,OAAO,EAAE;gBACP,aAAa,EAAE,SAAS,GAAG,MAAM;aAClC;SACF,CAAC,CAAC;IACL,CAAC;IAED,WAAW,CAAC,KAAc;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,wCAAwC,EAAE;YACxE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC,EAAE;SAC7B,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,OAAe;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,0CAA0C,OAAO,SAAS,CAAC,CAAC;IAC5F,CAAC;;kFAvBU,iBAAiB;kHAAjB,iBAAiB,WAAjB,iBAAiB","sources":["./src/app/companycam/companycam-credential.service.ts","./src/app/companycam/companycam.interceptor.ts","./src/app/companycam/companycam.module.ts","./src/app/companycam/companycam.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompanycamCredentialService {\n  #apiKey = localStorage.getItem('companycam/apiKey');\n\n  get apiKey(): string {\n    return this.#apiKey || '';\n  }\n\n  set apiKey(value: string) {\n    this.#apiKey = value;\n    localStorage.setItem('companycam/apiKey', value);\n  }\n}\n","import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CompanycamCredentialService} from './companycam-credential.service';\n\n@Injectable()\nexport class CompanycamInterceptor implements HttpInterceptor {\n  constructor(\n    private companycamCredentialService: CompanycamCredentialService,\n  ) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!req.url.startsWith('https://api.companycam.com')) {\n      return next.handle(req);\n    }\n\n    const {apiKey} = this.companycamCredentialService;\n    let headers = req.headers;\n    if (apiKey) {\n      headers = headers.set('Authorization', 'Bearer ' + apiKey);\n    }\n    const newReq = req.clone({headers});\n    return next.handle(newReq);\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\nimport {CompanycamInterceptor} from './companycam.interceptor';\nimport {CompanycamService} from './companycam.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n  ],\n  providers: [\n    CompanycamService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      multi: true,\n      useClass: CompanycamInterceptor,\n    },\n  ],\n})\nexport class CompanycamModule {\n}\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Photo} from './model/photo';\nimport {Project} from './model/project';\n\n@Injectable()\nexport class CompanycamService {\n\n  constructor(\n    private http: HttpClient,\n  ) {\n  }\n\n  test(apiKey: string): Observable<any> {\n    return this.http.get('https://api.companycam.com/v2/users/current', {\n      headers: {\n        Authorization: 'Bearer ' + apiKey,\n      },\n    });\n  }\n\n  getProjects(query?: string): Observable<Project[]> {\n    return this.http.get<Project[]>('https://api.companycam.com/v2/projects', {\n      params: query ? {query} : {},\n    });\n  }\n\n  getPhotos(project: string): Observable<Photo[]> {\n    return this.http.get<Photo[]>(`https://api.companycam.com/v2/projects/${project}/photos`);\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}